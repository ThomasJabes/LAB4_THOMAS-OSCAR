
LAB4ESCLAVO2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a2  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  00001039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:

 // Definir la frecuencia de la CPU para las funciones de delay

void setup() {
	// Configurar PC0, PC1, PC2 y PC3 como salidas para los LEDs
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3);
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 60       	ori	r24, 0x0F	; 15
  84:	87 b9       	out	0x07, r24	; 7
	
	// Configurar PB0 y PB1 como entradas para los botones
	DDRB &= ~((1 << PB0) | (1 << PB1));
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8c 7f       	andi	r24, 0xFC	; 252
  8a:	84 b9       	out	0x04, r24	; 4
	
	// Habilitar resistencias pull-up internas para los botones
	PORTB |= (1 << PB0) | (1 << PB1);
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	85 b9       	out	0x05, r24	; 5
  92:	08 95       	ret

00000094 <main>:
}

int main(void) {
	setup();
  94:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	
	uint8_t counter = 0; // Contador binario de 4 bits
  98:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1) {
		// Incrementar el contador si el botón en PB0 está presionado
		if (!(PINB & (1 << PB0))) {
  9a:	18 99       	sbic	0x03, 0	; 3
  9c:	0f c0       	rjmp	.+30     	; 0xbc <main+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	30 e7       	ldi	r19, 0x70	; 112
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x10>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1a>
  ae:	00 00       	nop
			_delay_ms(50); // Delay para evitar rebotes
			if (!(PINB & (1 << PB0))) {
  b0:	18 99       	sbic	0x03, 0	; 3
  b2:	04 c0       	rjmp	.+8      	; 0xbc <main+0x28>
				counter++;
  b4:	9f 5f       	subi	r25, 0xFF	; 255
				counter &= 0x0F; // Asegurarse de que el contador sea de 4 bits
  b6:	9f 70       	andi	r25, 0x0F	; 15
				while (!(PINB & (1 << PB0))); // Esperar hasta que el botón se libere
  b8:	18 9b       	sbis	0x03, 0	; 3
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <main+0x24>
			}
		}
		
		// Decrementar el contador si el botón en PB1 está presionado
		if (!(PINB & (1 << PB1))) {
  bc:	19 99       	sbic	0x03, 1	; 3
  be:	0f c0       	rjmp	.+30     	; 0xde <main+0x4a>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	30 e7       	ldi	r19, 0x70	; 112
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x32>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3c>
  d0:	00 00       	nop
			_delay_ms(50); // Delay para evitar rebotes
			if (!(PINB & (1 << PB1))) {
  d2:	19 99       	sbic	0x03, 1	; 3
  d4:	04 c0       	rjmp	.+8      	; 0xde <main+0x4a>
				counter--;
  d6:	91 50       	subi	r25, 0x01	; 1
				counter &= 0x0F; // Asegurarse de que el contador sea de 4 bits
  d8:	9f 70       	andi	r25, 0x0F	; 15
				while (!(PINB & (1 << PB1))); // Esperar hasta que el botón se libere
  da:	19 9b       	sbis	0x03, 1	; 3
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x46>
			}
		}
		
		// Mostrar el valor del contador en los LEDs
		PORTC = (PORTC & 0xF0) | (counter & 0x0F);
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	89 2b       	or	r24, r25
  e4:	88 b9       	out	0x08, r24	; 8
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	31 ee       	ldi	r19, 0xE1	; 225
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x58>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x62>
  f6:	00 00       	nop
  f8:	d0 cf       	rjmp	.-96     	; 0x9a <main+0x6>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
