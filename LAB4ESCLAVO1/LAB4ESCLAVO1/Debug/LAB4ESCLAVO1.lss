
LAB4ESCLAVO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000774  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cc  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011a  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_24>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  78:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <I2C_Slave_Init>:
void setup() {
	I2C_Slave_Init(0x08); // Configurar la dirección del esclavo
	ADC_Init(); // Inicializar el ADC
}

void loop() {
  80:	88 0f       	add	r24, r24
  82:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
  86:	85 e4       	ldi	r24, 0x45	; 69
  88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  8c:	78 94       	sei
  8e:	08 95       	ret

00000090 <ADC_Init>:
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <ADC_Read>:
  9e:	87 70       	andi	r24, 0x07	; 7
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	98 7f       	andi	r25, 0xF8	; 248
  a8:	89 2b       	or	r24, r25
  aa:	80 83       	st	Z, r24
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ba:	86 fd       	sbrc	r24, 6
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <ADC_Read+0x18>
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  c6:	08 95       	ret

000000c8 <__vector_24>:
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ee:	88 7f       	andi	r24, 0xF8	; 248
  f0:	88 3a       	cpi	r24, 0xA8	; 168
  f2:	89 f0       	breq	.+34     	; 0x116 <__vector_24+0x4e>
  f4:	28 f4       	brcc	.+10     	; 0x100 <__vector_24+0x38>
  f6:	80 36       	cpi	r24, 0x60	; 96
  f8:	41 f0       	breq	.+16     	; 0x10a <__vector_24+0x42>
  fa:	80 37       	cpi	r24, 0x70	; 112
  fc:	31 f0       	breq	.+12     	; 0x10a <__vector_24+0x42>
  fe:	20 c0       	rjmp	.+64     	; 0x140 <__vector_24+0x78>
 100:	80 3c       	cpi	r24, 0xC0	; 192
 102:	c1 f0       	breq	.+48     	; 0x134 <__vector_24+0x6c>
 104:	88 3c       	cpi	r24, 0xC8	; 200
 106:	b1 f0       	breq	.+44     	; 0x134 <__vector_24+0x6c>
 108:	1b c0       	rjmp	.+54     	; 0x140 <__vector_24+0x78>
 10a:	ec eb       	ldi	r30, 0xBC	; 188
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 6c       	ori	r24, 0xC0	; 192
 112:	80 83       	st	Z, r24
 114:	1a c0       	rjmp	.+52     	; 0x14a <__vector_24+0x82>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
 11c:	96 95       	lsr	r25
 11e:	87 95       	ror	r24
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 6c       	ori	r24, 0xC0	; 192
 130:	80 83       	st	Z, r24
 132:	0b c0       	rjmp	.+22     	; 0x14a <__vector_24+0x82>
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 6c       	ori	r24, 0xC0	; 192
 13c:	80 83       	st	Z, r24
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_24+0x82>
 140:	ec eb       	ldi	r30, 0xBC	; 188
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 6c       	ori	r24, 0xC0	; 192
 148:	80 83       	st	Z, r24
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <setup>:
 16c:	88 e0       	ldi	r24, 0x08	; 8
 16e:	0e 94 40 00 	call	0x80	; 0x80 <I2C_Slave_Init>
 172:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
 176:	08 95       	ret

00000178 <main>:
	// El bucle principal puede estar vacío
}

int main(void) {
	setup();
 178:	0e 94 b6 00 	call	0x16c	; 0x16c <setup>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x4>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
